.TH send 3 "MiNT-Net"
.SH NAME
send, sendto \- send a message from a socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.B #include <sys/types.h>
.PP
.B "int send(int s, const void *msg, ssize_t len, int flags);"
.PP
.SS \s-1AF_UNIX\s0 only:
.B #include <sys/un.h>
.PP
.PD 0
.B "int sendto(int s, const void *msg, ssize_t len, int flags,
.IP
.B "struct sockaddr *to, size_t tolen);"
.PD
.SH DESCRIPTION
.I send
and
.I sendto
are used to transmit a message to another socket.
.I send
can be used only when the socket is in a connected state,
whereas
.I sendto
can be used at any time.
.PP
.I s
is a socket descriptor that specifies the socket
on which the message will be sent.
.I msg
points to the buffer containing the message.
.PP
If the socket uses connection-based communications, such as a
.SM SOCK_STREAM 
socket, these calls can only be used
after the connection has been established (see
.IR connect (3)).
In this case, any destination specified by
.I to
is ignored.
For connectionless sockets, such as
.SM SOCK_DGRAM,
.I sendto
must be used unless the destination address has already been specified by
.IR connect (3).
If the destination address has been specified and
.I sendto
is used, an error results if any address is specified by
.IR to .
.PP
The address of the target is contained in a socket address structure 
pointed at by
.IR to ,
with
.I tolen
specifying the size of the structure.
.PP
If a
.I sendto
is attempted on a
.SM SOCK_DGRAM
socket before any local address has been bound to it,
the system automatically selects a local address to be used for the message.
In this case, there is no guarantee that the same local address
will be used for successive
.I sendto
requests on the same socket.
.PP
The length of the message is given by
.IR len ,
in bytes.
The length of data actually sent is returned. 
If the message is too long to pass atomically through the underlying 
protocol, the message is not transmitted, \-1 is returned, and 
.B errno
is set to
.SM EMSGSIZE.
For
.SM SOCK_DGRAM
sockets, this size is limited by the implementation (see the
.SM DEPENDENCIES
section below).
Otherwise there is no size limit.
.PP
No indication of failure to deliver is implicit in a
.IR send / sendto .
Return values of \-1 indicate some locally-detected errors.
.PP
If no buffer space is available to hold the data to be transmitted, 
.I send
blocks unless non-blocking mode is enabled.
You can enable non-blocking mode by setting the
.SM O_NDELAY
flag using
.IR fcntl .
.SM O_NDELAY
is defined in
.RB < fcntl.h >\s0.
If non-blocking mode is enabled, the
.I send
request completes in one of three ways:
.RS
.TP 3
\(bu
If there is enough space available in the system to buffer all the data,
.I send
completes successfully, having written out all of the data, and
returns the number of bytes written.
.TP
\(bu
If there is not enough space in the buffer to write out the entire request,
.I send
completes successfully, having written as much data as possible,
and returns the number of bytes it was able to write.
.TP
\(bu
If there is no space in the system to buffer any of the data,
.I send
completes successfully, having written no data, and returns 0.
.RE
.PP
If the
.SM O_NDELAY
flag is cleared using
.I fcntl,
non-blocking
.SM I/O
is disabled.
In this case, the 
.I send
always executes completely (blocking as necessary)
and returns the number of bytes written.
The default is that non-blocking
.SM I/O
is not enabled. 
.PP
The supported values for
.I flags
are zero, or
.SM MSG_OOB
(to send out-of-band data).
A
.IR write (3)
call made to a socket behaves in exactly the same way as 
.I send
with 
.I flags
set to zero.
.SM MSG_OOB
is not supported for
.SM AF_UNIX
sockets.
.PP
The
.IR select (3)
call can be used to determine when it is possible to send more data.
.SH DEPENDENCIES
.BR Default " and " maximum
buffer sizes are protocol-specific.
The buffer size can be set by calling 
.IR setsockopt (3)
with
.SM SO_SNDBUF.
.SH RETURN VALUE
If successful, the call returns the number of bytes sent.
If the call fails, \-1 is returned.
.SH DIAGNOSTICS
.I send
or
.I sendto
fails if:
.RS
.TP 22
.SM [EBADF]
An invalid descriptor was specified.
.TP
.SM [EMSGSIZE]
The socket requires that messages be sent atomically,
and the size of the message to be sent made this impossible.
.TP
.SM [EINTR]
The operation was interrupted by a signal before any data were sent.
(If some data was sent,
.I send
returns the number of bytes sent before the signal, and
.SM EINTR
is not given.)
.TP
.SM [EINVAL]
The
.I len
or
.I tolen
parameter is invalid or the specified destination address is not valid.
The argument
.I s
is not a socket.
.TP
.SM [EDESTADDRREQ]
The
.I to
parameter needs to specify a destination address for the message.
.TP
.SM [ENOTCONN]
A
.I send
on a socket that is not connected, or a
.I send
on a socket that has not completed the connect sequence with its peer,
or is no longer connected to its peer.
.TP
.SM [EISCONN]
An address was specified by
.I to
for a
.SM SOCK_DGRAM
socket which is already connected.
.TP
.SM [EAFNOSUPPORT]
Requested address does not match the address family of this socket.
.TP
\s-1[EPIPE]\s0 and \s-1SIGPIPE\s0 signal
An attempt was made to send on a socket that was connected,
but the connection has been shut down,
either by the remote peer or by this side of the connection.
Note that the default action for
.SM SIGPIPE,
unless the process has established a signal handler for this signal,
is to terminate the process.
.TP
.SM [EOPNOTSUPP]
The
.SM MSG_OOB
flag was specified; it is not supported for
.SM AF_UNIX
sockets.
.SH SEE ALSO
getsockopt(3),
recv(3),
select(3),
setsockopt(3),
socket(3).
