.TH sendmsg 3 "MiNT-Net"
.SH NAME
sendmsg \- send a message from a socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.PP
.B "int sendmsg(int s, const struct msghdr *msg, int flags);"
.PP
.SH DESCRIPTION
.I sendmsg
is used to transmit a message to another socket.
.I s
is a socket descriptor that specifies the socket
on which the message will be sent.
.I msg
points to an object of type
.B struct\ msghdr
that describes the message to be sent.
.B struct\ msghdr
is explained below.
.PP
.I sendmsg
operates the same way as
.IR sendto ,
except that it is able to gather the data given in
the
.B msg_iov
member of
.BR "struct\ msghdr" .
Note that sending of access rights is not implemented.
.I sendmsg
returns an error as described below if you try to send access rights.
Do not rely on this behavior,
because it might change in the future.
.PP
.B struct\ msghdr
is defined in
.RB < sys/socket.h >, 
and has the following form :
.IP
.nf
struct msghdr {
	void	*msg_name;	/* optional address */
	size_t	msg_namelen;	/* size of address  */
	struct iovec *msg_iov;	/* gather array for data */
	size_t	msg_iovlen;	/* # of elements in msg_iov */
	void    *msg_accrights;	/* access rights */
	size_t	msg_accrightslen; /* size of msg_accrights */
}
.fi
.PP
.I msg_name
is the destination address if the socket is unconnected; 
.I msg_name 
may be a null pointer if no name is specified.
.I msg_iov 
is the location of the gather data.
.I msg_accrights
specifies a buffer to send any access rights along 
with the message.
Transfer of access rights is not implemented,
so you should
set the msg_acccrights field to
.SM NULL
indicating that access rights are not being transferred. 
.PP
See
.I sendto(3)
to learn more about the behavior of
.IR sendmsg .
.SH RETURN VALUE
If the
.I sendmsg
call is successful, it returns the number of bytes sent.
If the call fails, \-1 is returned and an error code is stored in
.BR errno .
.SH DIAGNOSTICS
The call to
.I sendmsg
fails if:
.RS
.TP 22
.SM [EBADF]
An invalid descriptor was specified.
.TP
.SM [EMSGSIZE]
The socket requires that messages be sent atomically,
and the size of the message to be sent made this impossible.
.TP
.SM [EINTR]
The operation was interrupted by a signal before any data were sent.
(If some data was sent,
.I sendmsg
returns the number of bytes sent before the signal, and
.SM EINTR
is not given.)
.TP
.SM [EINVAL]
A member of the
.I msg
parameter is invalid or the specified destination address is not valid.
The argument
.I s
is not a socket.
Transfer of access rights is not implemented.
.TP
.SM [EDESTADDRREQ]
The
.I to
parameter needs to specify a destination address for the message.
.TP
.SM [ENOMEM]
There is insufficient buffer space to send the message.
.TP
.SM [ENOTCONN]
A
.I send
on a socket that is not connected, or a
.I send
on a socket that has not completed the connect sequence with its peer,
or is no longer connected to its peer.
.TP
.SM [EISCONN]
An address was specified by
.I to
for a
.SM SOCK_DGRAM
socket which is already connected.
.TP
.SM [EAFNOSUPPORT]
Requested address does not match the address family of this socket.
.TP
\s-1[EPIPE]\s0 and \s-1SIGPIPE\s0 signal
An attempt was made to send on a socket that was connected,
but the connection has been shut down,
either by the remote peer or by this side of the connection.
Note that the default action for
.SM SIGPIPE,
unless the process has established a signal handler for this signal,
is to terminate the process.
.TP
.SM [EOPNOTSUPP]
The
.SM MSG_OOB
flag was specified; it is not supported for
.SM AF_UNIX
sockets.
.SH SEE ALSO
getsockopt(3),
select(3),
send(3),
sendto(3),
socket(3).
