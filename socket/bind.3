.TH bind 3 "MiNT-Net"
.SH NAME
bind \- bind an address to a socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.SS \s-1AF_UNIX\s0 only:
.B #include <sys/un.h>
.PP
.B "int bind(int s, struct sockaddr \(**addr, size_t addrlen);"
.SH DESCRIPTION
.I bind
assigns an address to an unbound socket.
When a socket is created with
.IR socket (3),
it exists in an address space (address family) but has no address assigned.
.I bind
causes the socket whose descriptor is
.I s
to become bound to the address specified in the
socket address structure pointed to by
.IR addr .
.PP
.I addrlen
must specify the size of the address structure.
Since the size of the socket address structure
varies between socket address families,
the correct socket address structure
should be used with each address family
(for example,
.B struct\ sockaddr_un
for
.SM AF_UNIX\s0).
Typically, the
.I sizeof
function is used to pass this value in the
.I bind 
call (for example,
.BR sizeof(struct\ sockaddr_un) ).
.PP
The rules used in address binding vary between communication domains.
For example, when binding an
.SM AF_UNIX
socket to a path name (such as
.BR /tmp/mysocket ),
an open file having that name is created in the file system.
When the bound socket is closed,
that file still exists unless it is removed or unlinked.
.SH RETURN VALUE
If the bind is successful, a 0 value is returned.
If it fails, \-1 is returned and an error code is stored in
.BR errno .
.SH DIAGNOSTICS
.I bind
fails if:
.TP 25
.SM [EBADF]
.I s
is not a valid descriptor.
.TP
.SM [EADDRINUSE]
The specified address is already in use.
.TP
.SM [EINVAL]
The socket is already bound to an address, the socket has been shut down or
.I addrlen
is a bad value.
.I s
is not a socket.
.TP
.SM [EAFNOSUPPORT]
Requested address does not match the address family of this socket.
.TP
.SM [EACCES]
The user has no write permission for the directory containing
the socket file. (\c
.SM AF_UNIX
only.)
.TP
.SM [EDESTADDRREQ]
No
.I addr
parameter was specified.
.SH SEE ALSO
connect(3),
getsockname(3),
listen(3),
socket(3).
