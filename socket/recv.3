.TH recv 3 "MiNT-Net"
.SH NAME
recv, recvfrom \- receive a message from a socket
.SH SYNOPSIS
.B #include <sys/socket.h>
.B #include <sys/types.h>
.PP
.B "int recv(int s, void *buf, ssize_t len, int flags);"
.PP
.SS \s-1AF_UNIX\s0 only:
.B #include <sys/un.h>
.PP
.PD 0
.B "int recvfrom(int s, void *buf, ssize_t len, int flags,"
.IP
.B "struct sockaddr *from, size_t *fromlen);"
.PD
.SH DESCRIPTION
.I recv
and
.I recvfrom
are used to receive messages from a socket.
.PP
.I s
is a socket descriptor from which messages are received.
.I buf
is a pointer to the buffer into which the messages are placed.
.I len
is the maximum number of bytes that can fit in the buffer referenced by
.IR buf .
.PP
If the socket uses connection-based communications, such as a
.SM SOCK_STREAM
socket, these calls can only be used
after the connection has been established (see
.IR connect (3)).
For connectionless sockets such as
.SM SOCK_DGRAM,
these calls can be used whether a connection has been specified or not.
.PP
.I recvfrom
operates in the same manner as
.I recv
except that it is able to return the address of the socket
from which the message was sent.
For connected datagram sockets,
.I recvfrom
simply returns the same address as
.IR getpeername (2).
For stream sockets,
.I recvfrom
retrieves data in the same manner as
.IR recv ,
but does not return the socket address of the sender.
If
.I from
is non-zero, the source address of the message is placed
in the socket address structure pointed to by
.IR from .
.I fromlen
is a value-result parameter,
initialized to the size of the structure associated with
.IR from ,
and modified on return to indicate the actual size
of the address stored there.
If the memory pointed to by
.I from
is not large enough to contain the entire address, only the first
.I fromlen
bytes of the address are returned.
.PP
The length of the message is returned. 
.PP
For message-based sockets such as
.SM SOCK_DGRAM,
the entire message must be read in a single operation.
If a message is too long to fit in the supplied buffer,
the excess bytes are discarded.
For stream-based sockets such as
.SM SOCK_STREAM,
there is no concept of message boundaries.
In this case, data is returned to the user
as soon as it becomes available, and no data is discarded.
.PP
If no data is available to be received,
.I recv
waits for a message to arrive unless non-blocking mode is enabled.
You can enable non-blocking mode by setting the
.SM O_NDELAY
flag using
.IR fcntl .
.SM O_NDELAY
is defined in
.RB < fcntl.h >\s0.
If non-blocking mode is enabled, the
.I recv
request completes in one of three ways:
.RS
.TP 3
\(bu
If there is enough data available to satisfy the entire request,
.I recv
completes successfully, having read all the data,
and returns the number of bytes read.
.TP
\(bu
If there is not enough data available to satisfy the entire request,
.I recv
completes successfully, having read as much data as possible,
and returns the number of bytes it was able to read.
.TP
\(bu
If there is no data available, 
.I recv
completes successfully, having read no data, and returns 0.
.RE
.PP
If the
.SM O_NDELAY
flag is cleared using
.I fcntl,
non-blocking
.SM I/O,
if previously enabled, is disabled.
In this case, 
.I recv 
always executes completely (blocking as necessary)
and returns the number of bytes read.
.PP
The
.IR select (3)
call can be used to determine when more data arrives
by selecting the socket for reading.
.PP
The
.I flags
parameter can be set to
.SM MSG_PEEK,
.SM MSG_OOB,
both, or zero.
If it is set to
.SM MSG_PEEK, 
any data returned to the user still is treated as if it had not been read.
The next
.I recv
re-reads the same data.
The
.SM MSG_OOB
flag is used to alert the other process with an urgent message,
using a logically independent transmission channel
associated with a pair of connected stream sockets.
Refer to
.SM SEE ALSO
below for details.
.SM MSG_PEEK and
.SM MSG_OOB
are not supported for
.SM AF_UNIX
sockets.
.PP
A
.IR read (3)
call made to a socket behaves in exactly the same way as a
.I recv
with
.I flags
set to zero.
.SH RETURN VALUE
If the
.I recv
or
.I recvfrom
call is successful, it returns the number of bytes received.
If the call fails, \-1 is returned and an error code is stored in
.BR errno .
.SH DIAGNOSTICS
The call to
.I recv
or
.I recvfrom
fail if:
.RS
.TP 20
.SM [EBADF]
The argument
.I s
is an invalid descriptor.
.TP
.SM [EINVAL]
The argument
.I s
is not a socket.
.TP
.SM [EINTR]
The receive was interrupted by delivery of a signal
before any data was available for the receive.
.TP
.SM [ENOTCONN]
Receive on a
.SM SOCK_STREAM
socket that is not yet connected.
.TP
.SM [EOPNOTSUPP]
The
.SM MSG_OOB
or
.SM MSG_PEEK
flag was set for any
.SM AF_UNIX
socket.
Neither
.SM MSG_PEEK
nor
.SM MSG_OOB
is supported
for
.SM AF_UNIX
sockets.
.SH SEE ALSO
getsockopt(3),
read(3),
select(3),
send(3),
socket(3).
